{% extends "layouts/admin_base.html" %}

{% block title %}Progetti - Admin{% endblock %}



{% block content %}
<div class="admin-card admin-card-body mb-6">
    <div class="admin-flex admin-flex--between">
        <div>
            <h1 class="admin-heading-1">Progetti</h1>
            <p class="admin-text-small">Gestisci foto, descrizione e raccolta</p>
        </div>
        <div class="mt-4 md:mt-0 flex gap-3">
            <button id="create-project-btn" class="admin-btn admin-btn--primary" style="background: #3b82f6; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; font-weight: bold;" onclick="openCreateProjectModal();">
                <span style="margin-right: 8px;">+</span>
                Crea Progetto
            </button>
            <button onclick="window.location.reload()" class="admin-btn admin-btn--secondary" style="background: white; color: #374151; padding: 10px 20px; border: 1px solid #d1d5db; border-radius: 6px; cursor: pointer; font-weight: bold;">Aggiorna</button>
        </div>
    </div>
</div>

<div id="projects-grid-hero" class="admin-grid admin-grid--3"></div>
<div id="projects-empty-hero" class="text-center text-gray-500 admin-card admin-card-body hidden">Nessun progetto</div>

<!-- Filtri e Statistiche -->
<div class="hidden">
    <!-- Filtri -->
    <div class="admin-card">
        <div class="admin-card-header">
            <h2 class="admin-heading-3">Filtri Progetti</h2>
        </div>
        <div class="admin-card-body">
            <div class="space-y-4">
                <div class="admin-form-group">
                    <label class="admin-label">Stato Progetto</label>
                    <select id="status-filter" class="admin-input admin-select">
                        <option value="">Tutti gli stati</option>
                        <option value="draft">Bozza</option>
                        <option value="active">Attivo</option>
                        <option value="funded">Finanziato</option>
                        <option value="completed">Completato</option>
                        <option value="cancelled">Annullato</option>
                    </select>
                </div>
                
                <div class="admin-form-group">
                    <label class="admin-label">Ricerca Testuale</label>
                    <input type="text" id="search-input" class="admin-input" 
                           placeholder="Cerca per codice, titolo o descrizione...">
                </div>
                
                <div class="admin-form-group">
                    <label class="admin-label">Ordinamento</label>
                    <select id="sort-filter" class="admin-input admin-select">
                        <option value="created_at-desc">Più recenti</option>
                        <option value="created_at-asc">Più vecchi</option>
                        <option value="title-asc">Nome A-Z</option>
                        <option value="title-desc">Nome Z-A</option>
                        <option value="target_amount-desc">Importo ↓</option>
                        <option value="target_amount-asc">Importo ↑</option>
                    </select>
                </div>
                
                <button onclick="applyFilters()" class="admin-btn admin-btn--primary w-full">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"/>
                    </svg>
                    Applica Filtri
                </button>
                
                <button onclick="resetFilters()" class="admin-btn admin-btn--secondary w-full">
                    Reset
                </button>
            </div>
        </div>
    </div>

    <!-- Statistiche Progetti -->
    <div class="admin-card">
        <div class="admin-card-header">
            <h2 class="admin-heading-3">Statistiche</h2>
        </div>
        <div class="admin-card-body">
            <div class="space-y-4">
                <div id="projects-stats">
                    {% with loading_skeleton=true, loading_skeleton_lines=4 %}
                        {% include 'admin/components/loading.html' %}
                    {% endwith %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Lista Progetti -->
<div class="admin-card">
    <div class="admin-card-header">
        <div class="admin-flex admin-flex--between">
            <h2 class="admin-heading-3">Progetti Immobiliari</h2>
            <div class="admin-flex">
                <span class="admin-badge admin-badge--info" id="projects-count">0 progetti</span>
                <button onclick="refreshProjects()" class="admin-btn admin-btn--secondary admin-btn--sm ml-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
    
    <div class="admin-card-body">
        <!-- Loading State -->
        <div id="projects-loading" class="hidden">
            {% with loading_text='Caricamento progetti...', loading_size='lg' %}
                {% include 'admin/components/loading.html' %}
            {% endwith %}
        </div>
        
        <!-- Empty State -->
        <div id="projects-empty" class="hidden text-center py-12">
            <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
            </svg>
            <h3 class="admin-heading-3 text-gray-500">Nessun progetto trovato</h3>
            <p class="admin-text-body text-gray-400 mb-4">Non ci sono progetti che corrispondono ai filtri selezionati</p>
            <button onclick="resetFilters()" class="admin-btn admin-btn--secondary">Reset Filtri</button>
        </div>
        

        <!-- Projects Info Bar -->
        <div class="admin-card admin-card-body mb-6">
            <div class="admin-flex admin-flex--between">
                <div class="admin-flex">
                    <span class="admin-text-small text-gray-500 mr-4" id="total-projects-indicator">
                        <span id="total-projects-count">0</span> progetti totali
                    </span>
                </div>
            </div>
        </div>

        <!-- Projects Grid -->
        <div id="projects-grid" class="admin-grid admin-grid--3"></div>
        
        <!-- Pagination -->
        <div id="projects-pagination" class="mt-6 hidden">
            <div class="admin-flex admin-flex--between">
                <div class="admin-text-small text-gray-600">
                    Mostrando <span id="page-info">0-0 di 0</span> progetti
                </div>
                <div class="admin-flex" id="pagination-controls"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Component -->
{% include 'admin/components/modal.html' %}

<!-- Modal Nuovo Progetto -->
{% include 'admin/projects/create_project_modal.html' %}

<!-- Modal Vendita Progetto -->
<div id="sell-project-modal" class="admin-modal hidden">
    <div class="admin-modal-backdrop" onclick="closeModal('sell-project-modal')"></div>
    <div class="admin-modal-container">
        <div class="admin-modal-header">
            <h2 class="admin-heading-2">Vendita Progetto</h2>
            <button onclick="closeModal('sell-project-modal')" class="admin-btn admin-btn--secondary admin-btn--sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        
        <div class="admin-modal-body" style="max-height: 70vh; overflow-y: auto;">
            <div id="sell-project-content">
                <!-- Contenuto dinamico -->
            </div>
        </div>
        
        <div class="admin-modal-footer">
            <button onclick="closeModal('sell-project-modal')" class="admin-btn admin-btn--secondary mr-2">
                Annulla
            </button>
            <button onclick="confirmProjectSale()" class="admin-btn admin-btn--warning" id="confirm-sale-btn">
                Conferma Vendita
            </button>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
// === PROJECT SALE FUNCTIONS ===
let currentSaleProject = null;

async function sellProject(projectId) {
    console.log('sellProject chiamata con ID:', projectId);
    currentSaleProject = projectId;
    
    try {
        // Carica i dettagli del progetto e degli investimenti
        console.log('Caricamento dati vendita per progetto:', projectId);
        const response = await fetch(`/admin/projects/${projectId}/sale-data`);
        if (!response.ok) {
            throw new Error('Errore nel caricamento dei dati');
        }
        
        const data = await response.json();
        console.log('Dati ricevuti:', data);
        displaySaleModal(data);
        openModal('sell-project-modal');
        
    } catch (error) {
        console.error('Errore:', error);
        if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
            projectsManager.showAlert('error', 'Errore nel caricamento dei dati per la vendita');
        } else {
            alert('Errore nel caricamento dei dati per la vendita');
        }
    }
}

function displaySaleModal(data) {
    const content = document.getElementById('sell-project-content');
    const project = data.project;
    const investments = data.investments;
    
    // Salva i dati globalmente per i calcoli
    window.currentSaleData = data;
    
    // Calcola totali
    const totalInvested = parseFloat(project.funded_amount || 0);
    const totalInvestors = investments.length;
    
    content.innerHTML = `
        <div class="space-y-6">
            <!-- Info Progetto -->
            <div class="admin-card admin-card-body">
                <h3 class="admin-heading-3 mb-4">Dettagli Progetto</h3>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="admin-label">Nome Progetto</label>
                        <p class="admin-text-body">${project.name || project.title || 'N/A'}</p>
                    </div>
                    <div>
                        <label class="admin-label">Codice</label>
                        <p class="admin-text-body">${project.code || 'N/A'}</p>
                    </div>
                    <div>
                        <label class="admin-label">Importo Investito</label>
                        <p class="admin-text-body font-bold">€${totalInvested.toLocaleString()}</p>
                    </div>
                    <div>
                        <label class="admin-label">Numero Investitori</label>
                        <p class="admin-text-body font-bold">${totalInvestors}</p>
                    </div>
                </div>
            </div>
            
            <!-- Prezzo di Vendita -->
            <div class="admin-card admin-card-body">
                <h3 class="admin-heading-3 mb-4">Prezzo di Vendita</h3>
                <div class="admin-form-group">
                    <label class="admin-label">Prezzo di vendita (€)</label>
                    <input type="number" id="sale-price" class="admin-input" 
                           placeholder="Inserisci il prezzo di vendita" 
                           min="0" step="0.01" required>
                    <p class="admin-text-small text-gray-600 mt-2">
                        Inserisci il prezzo al quale l'immobile è stato venduto
                    </p>
                </div>
            </div>
            
            <!-- Preview Profitti -->
            <div class="admin-card admin-card-body">
                <h3 class="admin-heading-3 mb-4">Preview Distribuzione Profitti</h3>
                <div id="profit-preview" class="space-y-4">
                    <div class="text-center text-gray-500">
                        Inserisci un prezzo di vendita per vedere la preview
                    </div>
                </div>
            </div>
            
            <!-- Lista Investitori -->
            <div class="admin-card admin-card-body">
                <h3 class="admin-heading-3 mb-4">Investitori (${totalInvestors})</h3>
                <div class="space-y-3 max-h-60 overflow-y-auto">
                    ${investments.map(inv => `
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <div>
                                <p class="admin-text-body font-medium">${inv.user_name || 'Utente'}</p>
                                <p class="admin-text-small text-gray-600">Investimento: €${parseFloat(inv.amount).toLocaleString()}</p>
                            </div>
                            <div class="text-right">
                                <p class="admin-text-small text-gray-600">Quota: ${((parseFloat(inv.amount) / totalInvested) * 100).toFixed(2)}%</p>
                                <p class="admin-text-small font-medium" id="profit-${inv.id}">€0.00</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
    `;
    
    // Aggiungi event listener per il calcolo dinamico dei profitti
    document.getElementById('sale-price').addEventListener('input', updateProfitPreview);
}

function updateProfitPreview() {
    const salePrice = parseFloat(document.getElementById('sale-price').value) || 0;
    const totalInvested = parseFloat(window.currentSaleData?.project?.funded_amount || 0);
    
    if (salePrice <= 0) {
        document.getElementById('profit-preview').innerHTML = `
            <div class="text-center text-gray-500">
                Inserisci un prezzo di vendita per vedere la preview
            </div>
        `;
        return;
    }
    
    const totalProfit = salePrice - totalInvested;
    const profitPercentage = totalInvested > 0 ? ((totalProfit / totalInvested) * 100) : 0;
    
    let profitStatus = 'neutral';
    let profitIcon = '📊';
    if (totalProfit > 0) {
        profitStatus = 'success';
        profitIcon = '📈';
    } else if (totalProfit < 0) {
        profitStatus = 'warning';
        profitIcon = '📉';
    }
    
    document.getElementById('profit-preview').innerHTML = `
        <div class="grid grid-cols-3 gap-4">
            <div class="text-center p-4 bg-gray-50 rounded">
                <div class="text-2xl mb-2">${profitIcon}</div>
                <p class="admin-text-small text-gray-600">Profitto Totale</p>
                <p class="admin-text-body font-bold text-${profitStatus === 'success' ? 'green' : profitStatus === 'warning' ? 'red' : 'gray'}-600">
                    €${totalProfit.toLocaleString()}
                </p>
            </div>
            <div class="text-center p-4 bg-gray-50 rounded">
                <div class="text-2xl mb-2">📊</div>
                <p class="admin-text-small text-gray-600">Rendimento</p>
                <p class="admin-text-body font-bold text-${profitStatus === 'success' ? 'green' : profitStatus === 'warning' ? 'red' : 'gray'}-600">
                    ${profitPercentage.toFixed(2)}%
                </p>
            </div>
            <div class="text-center p-4 bg-gray-50 rounded">
                <div class="text-2xl mb-2">💰</div>
                <p class="admin-text-small text-gray-600">ROI per Investitore</p>
                <p class="admin-text-body font-bold text-${profitStatus === 'success' ? 'green' : profitStatus === 'warning' ? 'red' : 'gray'}-600">
                    ${(profitPercentage / 100).toFixed(2)}x
                </p>
            </div>
        </div>
        
        <div class="mt-4 p-4 bg-${profitStatus === 'success' ? 'green' : profitStatus === 'warning' ? 'yellow' : 'gray'}-50 rounded">
            <p class="admin-text-small text-${profitStatus === 'success' ? 'green' : profitStatus === 'warning' ? 'yellow' : 'gray'}-800">
                ${totalProfit > 0 ? 
                    `✅ Vendita profittevole! Gli investitori riceveranno il loro capitale + €${totalProfit.toLocaleString()} di profitti.` :
                    totalProfit < 0 ? 
                    `⚠️ Vendita in perdita. Gli investitori riceveranno solo il loro capitale investito (€${totalInvested.toLocaleString()}).` :
                    `📊 Vendita a pareggio. Gli investitori riceveranno esattamente il loro capitale investito.`
                }
            </p>
        </div>
    `;
    
    // Aggiorna i profitti individuali per ogni investitore
    updateIndividualProfits(salePrice, totalInvested);
}

function updateIndividualProfits(salePrice, totalInvested) {
    const investments = document.querySelectorAll('[id^="profit-"]');
    const totalProfit = salePrice - totalInvested;
    
    investments.forEach(element => {
        const investmentId = element.id.replace('profit-', '');
        
        // Trova l'investimento corrispondente nei dati
        const investmentData = window.currentSaleData?.investments?.find(inv => inv.id == investmentId);
        if (investmentData) {
            const individualAmount = parseFloat(investmentData.amount);
            const individualProfit = totalInvested > 0 ? (individualAmount / totalInvested) * totalProfit : 0;
            const individualReturn = individualAmount + individualProfit;
            
            element.innerHTML = `
                <div class="text-right">
                    <p class="admin-text-small text-gray-600">Ritorno: €${individualReturn.toLocaleString()}</p>
                    <p class="admin-text-small font-medium text-${individualProfit >= 0 ? 'green' : 'red'}-600">
                        ${individualProfit >= 0 ? '+' : ''}€${individualProfit.toLocaleString()}
                    </p>
                </div>
            `;
        }
    });
}

async function confirmProjectSale() {
    const salePrice = parseFloat(document.getElementById('sale-price').value);
    
    if (!salePrice || salePrice <= 0) {
        if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
            projectsManager.showAlert('error', 'Inserisci un prezzo di vendita valido');
        } else {
            alert('Inserisci un prezzo di vendita valido');
        }
        return;
    }
    
    if (!currentSaleProject) {
        if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
            projectsManager.showAlert('error', 'Errore: progetto non selezionato');
        } else {
            alert('Errore: progetto non selezionato');
        }
        return;
    }
    
    const confirmBtn = document.getElementById('confirm-sale-btn');
    setButtonLoading(confirmBtn, true, 'Elaborando vendita...');
    
    try {
        const response = await fetch('/admin/profits/api/admin/project-sale', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                project_id: currentSaleProject,
                sale_price: salePrice
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
                projectsManager.showAlert('success', `Vendita completata! Profitti distribuiti a ${result.investors_count} investitori.`);
                closeModal('sell-project-modal');
                await projectsManager.loadProjects();
            } else {
                alert(`Vendita completata! Profitti distribuiti a ${result.investors_count} investitori.`);
                closeModal('sell-project-modal');
            }
        } else {
            if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
                projectsManager.showAlert('error', result.error || 'Errore durante la vendita');
            } else {
                alert(result.error || 'Errore durante la vendita');
            }
        }
        
    } catch (error) {
        console.error('Errore vendita:', error);
        if (typeof projectsManager !== 'undefined' && projectsManager.showAlert) {
            projectsManager.showAlert('error', 'Errore di connessione durante la vendita');
        } else {
            alert('Errore di connessione durante la vendita');
        }
    } finally {
        setButtonLoading(confirmBtn, false);
    }
}

// Gestione Progetti Admin
class ProjectsManager {
    constructor() {
        this.projects = [];
        this.filteredProjects = [];
        this.currentPage = 1;
        this.projectsPerPage = 9;
        this.filters = {
            status: '',
            search: '',
            sort: 'created_at-desc'
        };
        
        this.init();
    }
    
    async init() {
        await this.loadProjects();
        this.updateStats();
        this.bindEvents();
        
        // Auto-refresh ogni 2 minuti
        setInterval(() => {
            this.loadProjects(false);
        }, 120000);
    }
    
    async loadProjects(showLoading = true) {
        if (showLoading) {
            document.getElementById('projects-loading').classList.remove('hidden');
            document.getElementById('projects-grid').classList.add('hidden');
        }
        
        try {
            const params = new URLSearchParams();
            if (this.filters.status) params.append('status', this.filters.status);
            
            params.append('format', 'json');
            const response = await fetch(`/admin/projects?${params.toString()}`);
            if (response.ok) {
                this.projects = await response.json();
                this.applyFilters();
                this.updateDisplay();
                this.updateStats();
            } else {
                this.showAlert('error', 'Errore nel caricamento dei progetti');
            }
        } catch (error) {
            console.error('Errore:', error);
            this.showAlert('error', 'Errore di connessione');
        } finally {
            if (showLoading) {
                document.getElementById('projects-loading').classList.add('hidden');
                document.getElementById('projects-grid').classList.remove('hidden');
            }
        }
    }
    
    applyFilters() {
        let filtered = [...this.projects];
        
        // Filtro per stato
        if (this.filters.status) {
            filtered = filtered.filter(p => p.status === this.filters.status);
        }
        
        // Filtro per ricerca testuale
        if (this.filters.search) {
            const search = this.filters.search.toLowerCase();
            filtered = filtered.filter(p => 
                p.code?.toLowerCase().includes(search) ||
                p.name?.toLowerCase().includes(search) ||
                p.title?.toLowerCase().includes(search) ||
                p.description?.toLowerCase().includes(search) ||
                p.address?.toLowerCase().includes(search)
            );
        }
        
        // Ordinamento
        const [field, direction] = this.filters.sort.split('-');
        filtered.sort((a, b) => {
            let aVal = a[field] || '';
            let bVal = b[field] || '';
            
            if (field === 'total_amount' || field === 'target_amount' || field === 'min_investment') {
                aVal = parseFloat(aVal) || 0;
                bVal = parseFloat(bVal) || 0;
            }
            
            if (direction === 'desc') {
                return aVal < bVal ? 1 : -1;
            } else {
                return aVal > bVal ? 1 : -1;
            }
        });
        
        this.filteredProjects = filtered;
        this.currentPage = 1;
    }
    
    updateDisplay() {
        const grid = document.getElementById('projects-grid');
        const empty = document.getElementById('projects-empty');
        const pagination = document.getElementById('projects-pagination');
        
        // Aggiorna contatore
        document.getElementById('projects-count').textContent = 
            `${this.filteredProjects.length} progetti`;
        
        if (this.filteredProjects.length === 0) {
            grid.classList.add('hidden');
            empty.classList.remove('hidden');
            pagination.classList.add('hidden');
            return;
        }
        
        empty.classList.add('hidden');
        grid.classList.remove('hidden');
        
        // Calcola paginazione
        const startIndex = (this.currentPage - 1) * this.projectsPerPage;
        const endIndex = startIndex + this.projectsPerPage;
        const pageProjects = this.filteredProjects.slice(startIndex, endIndex);
        
        // Renderizza progetti
        grid.innerHTML = pageProjects.map(project => this.renderProjectCard(project)).join('');
        
        // Aggiorna paginazione
        this.updatePagination();
    }
    
    renderProjectCard(project) {
        const statusColors = {
            draft: 'gray',
            active: 'blue', 
            funded: 'green',
            completed: 'purple',
            cancelled: 'red'
        };
        
        const statusLabels = {
            draft: 'Bozza',
            active: 'Attivo',
            funded: 'Finanziato', 
            completed: 'Completato',
            cancelled: 'Annullato'
        };
        
        const color = statusColors[project.status] || 'gray';
        const label = statusLabels[project.status] || project.status;
        
        const imgSrc = project.image_url ? `/uploads/projects/${project.image_url.split('/').pop()}` : 'https://via.placeholder.com/640x360?text=Foto+Progetto';
        const target = parseFloat(project.total_amount || 0) || 0;
        const invested = parseFloat(project.funded_amount || 0) || 0;
        const pct = target > 0 ? Math.min(100, Math.round((invested / target) * 100)) : 0;
        return `
            <div class="admin-card hover:shadow-lg transition-all duration-200">
                <div class="admin-card-body">
                    <img src="${imgSrc}" alt="foto" class="w-full h-40 object-cover rounded mb-3"/>
                    <div class="flex justify-between items-start mb-3">
                        <div>
                            <h3 class="admin-heading-3">${project.name || project.title || 'Senza titolo'}</h3>
                            <p class="admin-text-caption">${project.code || 'N/A'}</p>
                        </div>
                        <span class="admin-badge admin-badge--${color}">${label}</span>
                    </div>
                    
                    ${project.address ? `
                        <p class="admin-text-small text-gray-600 mb-2">
                            📍 ${project.address}
                        </p>
                    ` : ''}
                    
                    <div class="mb-4">
                        <div class="w-full bg-gray-200 rounded h-2 mb-2">
                            <div class="bg-blue-600 h-2 rounded" style="width:${pct}%"></div>
                        </div>
                        <div class="admin-text-small text-gray-700">Raccolto: €${invested.toLocaleString()} / €${target.toLocaleString()} (${pct}%)</div>
                    </div>
                    
                    <div class="space-y-2 mb-4">
                        ${project.total_amount ? `
                            <div class="flex justify-between">
                                <span class="admin-text-small">Target:</span>
                                <span class="admin-text-small font-medium">€${parseFloat(project.total_amount).toLocaleString()}</span>
                            </div>
                        ` : ''}
                        
                        ${project.min_investment ? `
                            <div class="flex justify-between">
                                <span class="admin-text-small">Min. investimento:</span>
                                <span class="admin-text-small font-medium">€${parseFloat(project.min_investment).toLocaleString()}</span>
                            </div>
                        ` : ''}
                        
                        <div class="flex justify-between">
                            <span class="admin-text-small">Creato:</span>
                            <span class="admin-text-small">${new Date(project.created_at).toLocaleDateString('it-IT')}</span>
                        </div>
                    </div>
                    
                    <!-- Indicatori file -->
                    <div class="flex gap-2 mb-4">
                        ${project.photo_filename ? `
                            <span class="admin-badge admin-badge--green admin-badge--sm">
                                📷 Foto
                            </span>
                        ` : ''}
                        ${project.documents_filename ? `
                            <span class="admin-badge admin-badge--blue admin-badge--sm">
                                📄 Documenti
                            </span>
                        ` : ''}
                    </div>
                    
                    <div class="admin-flex">
                        <button onclick="sellProject(${project.id})" 
                                class="admin-btn admin-btn--warning admin-btn--sm flex-1 mr-2">
                            Vendita
                        </button>
                        <button onclick="editProject(${project.id})" 
                                class="admin-btn admin-btn--primary admin-btn--sm flex-1">
                            Modifica
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
    
    updatePagination() {
        const pagination = document.getElementById('projects-pagination');
        const pageInfo = document.getElementById('page-info');
        const controls = document.getElementById('pagination-controls');
        
        const totalPages = Math.ceil(this.filteredProjects.length / this.projectsPerPage);
        
        if (totalPages <= 1) {
            pagination.classList.add('hidden');
            return;
        }
        
        pagination.classList.remove('hidden');
        
        const startIndex = (this.currentPage - 1) * this.projectsPerPage + 1;
        const endIndex = Math.min(this.currentPage * this.projectsPerPage, this.filteredProjects.length);
        
        pageInfo.textContent = `${startIndex}-${endIndex} di ${this.filteredProjects.length}`;
        
        // Genera controlli paginazione
        let controlsHTML = '';
        
        // Precedente
        if (this.currentPage > 1) {
            controlsHTML += `<button onclick="projectsManager.changePage(${this.currentPage - 1})" 
                                    class="admin-btn admin-btn--secondary admin-btn--sm">Precedente</button>`;
        }
        
        // Pagine
        for (let i = 1; i <= totalPages; i++) {
            if (i === this.currentPage) {
                controlsHTML += `<span class="admin-btn admin-btn--primary admin-btn--sm">${i}</span>`;
            } else if (i === 1 || i === totalPages || Math.abs(i - this.currentPage) <= 1) {
                controlsHTML += `<button onclick="projectsManager.changePage(${i})" 
                                        class="admin-btn admin-btn--secondary admin-btn--sm">${i}</button>`;
            } else if (Math.abs(i - this.currentPage) === 2) {
                controlsHTML += `<span class="admin-text-body">...</span>`;
            }
        }
        
        // Successivo
        if (this.currentPage < totalPages) {
            controlsHTML += `<button onclick="projectsManager.changePage(${this.currentPage + 1})" 
                                    class="admin-btn admin-btn--secondary admin-btn--sm">Successivo</button>`;
        }
        
        controls.innerHTML = controlsHTML;
    }
    
    changePage(page) {
        this.currentPage = page;
        this.updateDisplay();
        
        // Scroll to top
        document.getElementById('projects-grid').scrollIntoView({ behavior: 'smooth' });
    }
    
    updateStats() {
        const stats = {
            total: this.projects.length,
            draft: this.projects.filter(p => p.status === 'draft').length,
            active: this.projects.filter(p => p.status === 'active').length,
            funded: this.projects.filter(p => p.status === 'funded').length,
            completed: this.projects.filter(p => p.status === 'completed').length,
            cancelled: this.projects.filter(p => p.status === 'cancelled').length
        };
        
        document.getElementById('projects-stats').innerHTML = `
            <div class="space-y-3">
                <div class="flex justify-between">
                    <span class="admin-text-small">Totali:</span>
                    <span class="admin-badge admin-badge--gray">${stats.total}</span>
                </div>
                <div class="flex justify-between">
                    <span class="admin-text-small">Attivi:</span>
                    <span class="admin-badge admin-badge--info">${stats.active}</span>
                </div>
                <div class="flex justify-between">
                    <span class="admin-text-small">Finanziati:</span>
                    <span class="admin-badge admin-badge--success">${stats.funded}</span>
                </div>
                <div class="flex justify-between">
                    <span class="admin-text-small">Bozze:</span>
                    <span class="admin-badge admin-badge--warning">${stats.draft}</span>
                </div>
            </div>
        `;
    }
    
    bindEvents() {
        // Debounce per la ricerca
        let searchTimeout;
        document.getElementById('search-input').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                this.filters.search = e.target.value.trim();
                this.applyFilters();
                this.updateDisplay();
            }, 300);
        });
        
        // Enter key per ricerca
        document.getElementById('search-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.filters.search = e.target.value.trim();
                this.applyFilters();
                this.updateDisplay();
            }
        });
    }
    
    showAlert(type, message) {
        const alerts = document.getElementById('projects-alerts');
        const alertId = 'alert-' + Date.now();
        
        alerts.innerHTML = `
            <div id="${alertId}" class="admin-alert admin-alert--${type} admin-fade-in">
                <div class="flex items-start">
                    <div class="flex-shrink-0 mr-3">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm">${message}</p>
                    </div>
                    <button onclick="document.getElementById('${alertId}').remove()" class="ml-3 text-sm opacity-70 hover:opacity-100">×</button>
                </div>
            </div>
        `;
        
        setTimeout(() => {
            const alert = document.getElementById(alertId);
            if (alert) alert.remove();
        }, 5000);
    }
}

// Istanza globale
let projectsManager;

// Funzioni globali
function applyFilters() {
    projectsManager.filters.status = document.getElementById('status-filter').value;
    projectsManager.filters.sort = document.getElementById('sort-filter').value;
    projectsManager.applyFilters();
    projectsManager.updateDisplay();
}

function resetFilters() {
    document.getElementById('status-filter').value = '';
    document.getElementById('search-input').value = '';
    document.getElementById('sort-filter').value = 'created_at-desc';
    
    projectsManager.filters = {
        status: '',
        search: '',
        sort: 'created_at-desc'
    };
    
    projectsManager.applyFilters();
    projectsManager.updateDisplay();
}

function refreshProjects() {
    projectsManager.loadProjects(true);
}

function openCreateProjectModal() {
    openModal('create-project-modal');
    
    // Set default dates
    const today = new Date().toISOString().split('T')[0];
    const nextMonth = new Date();
    nextMonth.setMonth(nextMonth.getMonth() + 1);
    
    document.querySelector('[name="start_date"]').value = today;
    document.querySelector('[name="end_date"]').value = nextMonth.toISOString().split('T')[0];
}

async function submitCreateProject() {
    const form = document.getElementById('create-project-form');
    const formData = new FormData(form);
    
    // Validazione campi obbligatori
    if (!formData.get('code') || !formData.get('title') || !formData.get('description') || 
        !formData.get('target_amount') || !formData.get('address')) {
        projectsManager.showAlert('error', 'Codice, nome, descrizione e importo target sono obbligatori');
        return;
    }
    
    // Validazione importi
    const totalAmount = parseFloat(formData.get('target_amount'));
    const minInvestment = parseFloat(formData.get('min_investment')) || 1000;
    
    if (totalAmount <= 0 || minInvestment <= 0) {
        projectsManager.showAlert('error', 'Gli importi devono essere maggiori di zero');
        return;
    }
    
    // Validazione file (opzionale)
    const photo = formData.get('photo');
    if (photo && photo.size > 0) {
        if (photo.size > 5 * 1024 * 1024) { // 5MB
            projectsManager.showAlert('error', 'Foto troppo grande (max 5MB)');
            return;
        }
    }
    
    const btn = document.getElementById('create-project-btn');
    setButtonLoading(btn, true, 'Creazione...');
    
    try {
        const response = await fetch('/admin/projects/new', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.id || result.success) {
            const projectName = formData.get('title') || formData.get('name') || 'Progetto';
            projectsManager.showAlert('success', `Progetto "${projectName}" creato con successo!`);
            closeModal('create-project-modal');
            form.reset();
            await projectsManager.loadProjects();
        } else {
            projectsManager.showAlert('error', result.error || 'Errore nella creazione');
        }
    } catch (error) {
        console.error('Errore:', error);
        projectsManager.showAlert('error', 'Errore di connessione');
    } finally {
        setButtonLoading(btn, false);
    }
}

function editProject(id) {
    window.location.href = `/admin/projects/${id}`;
}

// Aggiorna il contatore progetti totali
function updateTotalProjectsCount() {
    if (projectsManager && projectsManager.projects) {
        document.getElementById('total-projects-count').textContent = projectsManager.projects.length;
    }
}

// === EXTENDED PROJECT MANAGER ===
// Estendo il ProjectsManager per supportare funzionalità aggiuntive
const originalUpdateDisplay = ProjectsManager.prototype.updateDisplay;
ProjectsManager.prototype.updateDisplay = function() {
    originalUpdateDisplay.call(this);
    updateTotalProjectsCount();
};

        // === MODAL FUNCTIONS ===
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('hidden');
                modal.style.display = 'flex';
                document.body.style.overflow = 'hidden';
                
                // Forza il centramento perfetto
                const container = modal.querySelector('.admin-modal-container');
                if (container) {
                    container.style.position = 'fixed';
                    container.style.top = '50%';
                    container.style.left = '50%';
                    container.style.transform = 'translate(-50%, -50%)';
                    container.style.margin = '0';
                }
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('hidden');
                modal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        }

        function openCreateProjectModal() {
            openModal('create-project-modal');
        }

// Close modal when clicking outside
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('admin-modal-backdrop')) {
        const modal = e.target.closest('.admin-modal');
        if (modal) {
            closeModal(modal.id);
        }
    }
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.admin-modal[style*="block"]');
        if (openModal) {
            closeModal(openModal.id);
        }
    }
});

        // Inizializzazione
        document.addEventListener('DOMContentLoaded', function() {
            projectsManager = new ProjectsManager();
            
            // Event listener per il tasto Crea Progetto
            const createBtn = document.getElementById('create-project-btn');
            if (createBtn) {
                createBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    openCreateProjectModal();
                });
            }
        });
</script>
{% endblock %}
